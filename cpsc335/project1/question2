//THOMAS STANTON
#include <iostream>
#include <vector>
#include <climits>
#include <string>
#include <array>

// for INT_MAX
using namespace std;

const int HOURS = 24;//1
const int MINUTES = 60;//1



struct Interval {
	string start;
	string end;
};//+3


string input()//+12
{

	string time1 = "";
	int minuteInput = 0, hourInput = 0;



	cout << "Enter the hour. Military Hours 000-23" << endl;
	cin >> hourInput;
	if (hourInput < 0 || hourInput > 23)//if the current bit isn't out of bounds
	{
		cout << "Wrong input, try again" << endl;
	}
	else if (hourInput >= 0 && hourInput <= 23)//if the current bit isn't out of bounds
	{
		cout << "Enter the minute. Minutes 0-59" << endl;
		cin >> minuteInput;
		if (minuteInput < 0 || minuteInput > 59)//if the current bit isn't out of bounds
		{
			cout << "Wrong input, try again" << endl;
		}
		else if (minuteInput >= 0 && minuteInput <= 59)//if the current bit isn't out of bounds
		{
			time1 = to_string(hourInput) + to_string(minuteInput);//input to string for
		}
	}
	string openTime = time1;
	return	 openTime;

}

class TimeHolder
{

	int meetingDuration;//1
	vector<Interval> freeTime;//1
public:
	int myarray[HOURS][MINUTES];
	TimeHolder() : myarray{ {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0} ,
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0} ,
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0} }
	{

		meetingDuration = 0;

	}//constructor array, better to keep closed as it doesn't look pretty.

	void answer(vector<Interval> schedule1, Interval active1, vector<Interval> schedule2, Interval active2, int duration)	//function is 5n^3 +34n^2+2n +5
	{
		meetingDuration = duration;//add the durration input to the class object
		int minutesInDay[HOURS][MINUTES];
		int totalMinutes = 0;
		string startTime = " ", endTime = " ";
		//all above is 5

		for (int i = 0; i < 24; i++)//3n^2
		{
			for (int j = 0; j < 60; j++)
			{
				string placeholder = to_string(i) + to_string(j);//grab the two integers and add them together as 2+2 -> 22
				minutesInDay[i][j] = stoi(placeholder);
				myarray[i][j] = minutesInDay[i][j];//back to and integer and put into the class array to be used
			}
		}
		timeFinder(schedule1, active1);//call for both persons schedule
		timeFinder(schedule2, active2);// 12n^2 +4 worst case

		for (int i = 0; i < 24; i++)//n
		{
			for (int j = 0; j < 60; j++)//n
			{
				if (myarray[i][j] != 0)//1
				{
					int durationAdder = meetingDuration;//1
					startTime = to_string(myarray[i][j]);//1
					bool continues = true;//1
					while (continues)//n
					{
						int hour = (myarray[i][j] + durationAdder) / 24;// calculate the new hours time added with the inputted duration. 1
						int minute = (myarray[i][j] + durationAdder) % 60;//calculate the new minutes time added with the inputted duration.1
						if ((hour > 23 || minute > 59) || (myarray[hour][minute] == 0))//As long as the hours and minutes are not out of bounds or the position of the array hasn't been made null. ignore. 1
						{
							break;//1
						}
						else if (myarray[hour][minute] != 0)//As long as the position hasn't been made null. 1
						{
							endTime = to_string(myarray[hour][minute]);// the new end time if the numbers in the array.1
							durationAdder = durationAdder + duration;//add the duration adder to itself so that you can look for a new position on the array. 1
						}

					}
					Interval filler = { startTime,endTime };//add both the start and end times for the open sections to the struct1
					freeTime.push_back(filler);// add the struct to the vector and repeat loop until end of schedule.1
				}
				//above code is 5n^3 +5n^2
			}
		}
	}


	void output()//n +1
	{
		cout << "The free times for both people that overlap are" << endl; //output the freetime variables
		for (auto& a : freeTime) {
			cout << a.start << ", "
				<< a.end
				<< endl;
		}
	}
	void timeFinder(vector<Interval> schedule, Interval active)// 13n^2 +n +4 worst case
	{
		int  j = 0;
		int activation = 0;
		bool Active = false;
		auto i = schedule.begin();
		while (i != schedule.end() - 1)
		{
			while (j != 1440)//work through the iterations
			{
				string start = schedule.data()->start;//grab the beginning block of taken time
				string end = schedule.data()->end;//grab the ending number of taken time. IE your schedule is free now
				int hour = j / 60;//1
				int minute = j % 24;//1

				string placeholder = to_string(hour) + to_string(minute);//switch to string 


				if (placeholder == active.start && activation == 0)//check string of hour and minute and the code hasn't been active yet
				{
					activation++;
					Active = true;//activate
				}
				if (placeholder == start)/*sort for the end time of the unavailabilities */
				{
					Active = false;
				}

				if (placeholder == end)//the end of the current scheduled time has been reached
				{
					Active = true;
				}
				if (placeholder == active.end)//if you have met the end of one persons active time
				{
					Active = false;
				}
				if (Active == false)//if the state is false, edit the position in the array to be zero
				{
					myarray[hour][minute] = 0;
				}

				j++;//1
			}
			i++;///
		}
	}

};

int main()
{
	vector<Interval> person1schedule;
	Interval person1active;
	vector<Interval> person2schedule;
	Interval person2active;

	vector<Interval> freeTime;
	int meetingDuration = 0;
	TimeHolder test;

	Interval vectorInput;


	bool stillInputting = true;
	bool inputtingPerson = true;
	bool startTimeInputted = false;
	string time1 = "", time2 = "";
	int personchooser = 0, openInput = 5000, closeInput = 5000;
	//-------------------------------------------------------------15

	cout << "Inputting for person 1...." << "Inputting for active" << endl;
	person1active.start = input();
	person1active.end = input();
	cout << "Inputting for schedule" << endl;
	int another = 3;//------------------------------------------5
	do {
		vectorInput.start = input();
		vectorInput.end = input();
		person1schedule.push_back(vectorInput);
		cout << "Would you like to enter another scheduled time? Y=1/N=0" << endl;
		cin >> another;

	} while (another == 1);//5n



	cout << "Inputting for person 2...." << "Inputting for active" << endl;

	person2active.start = input();
	person2active.end = input();
	cout << "Inputting for schedule" << endl;//4

	do {
		vectorInput.start = input();
		vectorInput.end = input();
		person2schedule.push_back(vectorInput);
		cout << "Would you like to enter another scheduled time? Y=1/N=0" << endl;
		cin >> another;

	} while (another == 1);//5n


	cout << "What is the duration of your meetings? Give in increments of minutes" << endl;

	cin >> meetingDuration;//2

	test.answer(person1schedule, person1active, person2schedule, person2active, meetingDuration);//function is 5n^3 +34n^2+2n +5

	test.output();//n+1


	//total efficiency case is (5n^3 +34n^2+2n +5)+(n+1)+(10n+26)=5n^3+34n^2+12n+33





}
